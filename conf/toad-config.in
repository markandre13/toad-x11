#!/bin/sh
# toad-config - script to get information about the installed
# version of the TOAD C++ GUI Libary.
# $Id$
#
# Copyleft 2003-2005 Mark-Andr√© Hopf <mhopf@mark13.org>
# All Rights Reversed.
#

prefix=@prefix@
exec_prefix=@prefix@
libdir=@libdir@
bindir=@bindir@
includedir=@includedir@
datadir=@datadir@

CXX=@CXX@
CXXFLAGS="-I${includedir} @CXXFLAGS@"
LIBS="-L${libdir} -ltoad @LIBS@"

usage() {
cat<<EOF
Usage: $0 [options]
Options:
  --prefix
  --exec-prefix
  --cxx                Display the C++ compiler to be used with the library
  --cxxflags           Display compiler Options
  --libs               Display linker Options
  --new-project <name> Create minimal project with 'Makefile' and '<name>.cc'
  --help               Display this information

For bug reporting instructions, please see:
<URL:http://www.mark13.org/toad/contact.html>.
EOF
}

new_project() {
  project=$1
  if test -f Makefile ; then
    echo "Can't create project '${project}': file 'Makefile' already exists"
    exit 1
  fi
  if test -f ${project}.cc ; then
    echo "Can't create project '${project}': file '${project}.cc' already exists"
    exit 1
  fi
cat > Makefile <<EOF
PRGFILE=${project}
SRCS=${project}.cc

CXX=\`toad-config --cxx\`
CXXFLAGS=\`toad-config --cxxflags\`
LD=\$(CXX)
LDFLAGS=\`toad-config --libs\`
OBJS=\$(SRCS:.cc=.o)

all: \$(PRGFILE)

.SUFFIXES: .cc

.cc.o:
	@echo compiling \$*.cc ...
	@\$(CXX) \$(CXXFLAGS) \$*.cc -c -o \$*.o

\$(PRGFILE): \$(OBJS)
	@echo linking \$(PRGFILE) ...
	@\$(LD) \$(LDFLAGS) \$(OBJS) -o \$(PRGFILE) \$(LDFLAGS)
	@echo Ok

clean::
	@echo removing generated files in `pwd`
	@rm -f \$(PRGFILE) .depend \$(CLEAN)
	@find . -name "*.o" -exec rm -f {} \;
	@find . -name "*.bak" -exec rm -f {} \;
	@find . -name "*~" -exec rm -f {} \;
	@find . -name "core" -exec rm -f {} \;
	@find . -name "DEADJOE" -exec rm -f {} \;
	@find . -name "a.out" -exec rm -f {} \;

depend::
	@/usr/X11R6/bin/makedepend \$(INCDIRS) -Y \$(SRCS) 2> /dev/null
EOF
cat > ${project}.cc <<EOF
#include <toad/toad.hh>
#include <toad/form.hh>
#include <toad/menubar.hh>
#include <toad/action.hh>

#define RESOURCE(file) "file://" file

using namespace toad;

class TMainWindow:
  public TForm
{
    typedef TForm super;
    typedef TMainWindow This;
  public:
    TMainWindow(TWindow *parent, const string &title);
    void menuAbout();
};

int
main(int argc, char **argv, char **envv)
{
  toad::initialize(argc, argv, envv);
  {
    TMainWindow window(0, "${project}");
    toad::mainLoop();
  }
  toad::terminate();
  return 0;
}

TMainWindow::TMainWindow(TWindow *parent, const string &title):
  super(parent, title)
{
  TMenuBar *menubar = new TMenuBar(this, "menubar");
  menubar->loadLayout(RESOURCE("menubar.atv"));
  attach(menubar, TOP|LEFT|RIGHT);
  
  TAction *action;
  action = new TAction(this, "file|quit");
  connect(action->sigActivate, &toad::postQuitMessage, 0);
  
  action = new TAction(this, "help|about");
  connect(action->sigActivate, this, &This::menuAbout);
}

void
TMainWindow::menuAbout()
{  
  messageBox(
    this,
    "About ${project}",
    "Generated with toad-config on `date` by `whoami`@`hostname -f`.");
}
EOF
cat > menubar.atv <<EOF
toad::TMenuLayout{
  scope = "toplevel"
  toad::TMenuEntry {
    name = "file"
    label = "File"
    toad::TMenuEntry {
      name = "new"
      label = "New"
      shortcut = "Alt+N"
    }
    toad::TMenuEntry {
      name = "open"
      label = "Open"
      shortcut = "Alt+O"
    }
    toad::TMenuEntry {
      name = "save"
      label = "Save"
      shortcut = "Alt+S"
    }
    toad::TMenuEntry {
      name = "save_as"
      label = "Save As..."
      shortcut = "Alt+A"
    }
    toad::TMenuEntry {
      name = "close"
      label = "Close"
      shortcut = ""
      icon = ""
    }
    toad::TMenuSeparator { }
    toad::TMenuEntry {
      name = "quit"
      label = "Quit"
      shortcut = "Alt+F4"
      icon = "exit.png"
    }
  }
  toad::TMenuEntry {
    name = "edit"
    label = "Edit"
    toad::TMenuEntry {
      name = "undo"
      label = "Undo"
      shortcut = "Alt+Z"
    }
    toad::TMenuEntry {
      name = "redo"
      label = "Redo"
      shortcut = "Alt+Y"
    }
    toad::TMenuSeparator { }
    toad::TMenuEntry {
      name = "cut" 
      label = "Cut"
      shortcut = "Alt+X"  
      icon = "editcut.png"
    }
    toad::TMenuEntry {
      name = "copy" 
      label = "Copy"
      shortcut = "Alt+C"   
      icon = "editcopy.png"
    }
    toad::TMenuEntry {  
      name = "paste"    
      label = "Paste"   
      shortcut = "Alt+V"
      icon = "editpaste.png"
    }
    toad::TMenuEntry {
      name = "delete" 
      label = "Delete"
      shortcut = "Del"
    }
  }
  toad::TMenuEntry {
    name = "help"
    label = "Help"
    shortcut = ""   
    icon = ""
    toad::TMenuEntry {
      name = "manual"
      label = "Show Manual"
      shortcut = ""   
      icon = ""
    }
    toad::TMenuEntry {
      name = "about"
      label = "About"
      shortcut = ""   
      icon = ""
    }
  }
}
EOF
}


if test $# -eq 0 ; then
  usage
  exit 0;
fi

while true ; do

arg=$1
shift


if test -z $arg ; then
  exit 0;
fi

case $arg in
  --prefix)
    echo $prefix
    ;;
  --exec-prefix)
    echo $exec_prefix
    ;;
  --libs)
    echo $LIBS
    ;;
  --cxxflags)
    echo $CXXFLAGS
    ;;
  --cxx)
    echo $CXX
    ;;
  --new-project)
    new_project $1
    shift
    ;;
  --help)
    usage
    exit 0
    ;;
  *)
    echo "unknown argument '$arg'"
    exit 1;
    ;;
esac

done

exit 0
